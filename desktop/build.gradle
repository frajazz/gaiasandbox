apply plugin: "java"
apply plugin: 'install4j'

sourceCompatibility = 1.7
sourceSets.main.java.srcDirs = ["src/"]

project.ext.mainClassName = "gaia.cu9.ari.gaiaorbit.desktop.GaiaSandboxDesktop"
//project.ext.mainClass = "gaia.cu9.ari.gaiaorbit.desktop.GaiaSandboxDesktop"
project.ext.assetsDir = new File("../android/assets");
project.ext.workDir = new File(".");

install4j {
    installDir = file('/home/tsagrista/Programs/install4j6')
}

sourceSets {
    main {
        main {
            output.resourcesDir = project.assetsDir.absolutePath
        }
    }
}

task debug(dependsOn: classes, type: JavaExec, description: "Debug the desktop project") {
    main = project.mainClassName
    systemProperties['properties.file'] = '../android/assets/conf/global.properties'
    systemProperties['assets.location'] = '../android/assets/'
    	
    // Parallel GC
    //jvmArgs = ['-Xms2g', '-Xmx4g', '-XX:+UseParallelGC']
    // CMS GC
    jvmArgs = ['-Xms2g', '-Xmx4g', '-XX:+UseConcMarkSweepGC']
    // G1 GC
    //jvmArgs = ['-Xms2g', '-Xmx4g', '-XX:+UseG1GC']
    classpath = sourceSets.main.runtimeClasspath
    classpath += files(project.assetsDir)
    standardInput = System.in
    workingDir = project.workDir
    debug = true
}

task run(dependsOn: jar, type: JavaExec, description: "Runs the desktop project") {
    main = project.mainClassName
    systemProperties['properties.file'] = '../android/assets/conf/global.properties'
    systemProperties['assets.location'] = '../android/assets/'
    	
    // Parallel GC
    //jvmArgs = ['-Xms2g', '-Xmx4g', '-XX:+UseParallelGC']
    // CMS GC
    jvmArgs = ['-Xms2g', '-Xmx4g', '-XX:+UseConcMarkSweepGC']
    // G1 GC
    //jvmArgs = ['-Xms2g', '-Xmx4g', '-XX:+UseG1GC']
    classpath = sourceSets.main.runtimeClasspath
    classpath += files(project.assetsDir)
    standardInput = System.in
    workingDir = project.workDir
    ignoreExitValue = true
}

task runCatalogFilter(dependsOn: jar, type: JavaExec, description: "Runs the catalog filter application to generate day catalogs for WebGL") {
    main = 'gaia.cu9.ari.gaiaorbit.desktop.util.GaiaCatalogFilter'
    classpath = sourceSets.main.runtimeClasspath
    classpath += files(project.assetsDir)
    standardInput = System.in
    workingDir = project.workDir
    ignoreExitValue = true
}


task runOctreeGenerator(dependsOn: jar, type: JavaExec, description: "Runs the octree generator to create the octree structure from a base catalog") {
    main = 'gaia.cu9.ari.gaiaorbit.data.OctreeGeneratorTest'
    systemProperties['properties.file'] = '../android/assets/conf/global.properties'
    classpath = sourceSets.main.runtimeClasspath
    classpath += files(project.assetsDir)
    standardInput = System.in
    workingDir = project.workDir
    ignoreExitValue = true
}

task runGalaxyGenerator(dependsOn: jar, type: JavaExec, description: "Runs the galaxy generator to procedurally generate a galaxy") {
    main = 'gaia.cu9.ari.gaiaorbit.data.galaxy.GalaxyGenerator'
    systemProperties['properties.file'] = '../android/assets/conf/global.properties'
    classpath = sourceSets.main.runtimeClasspath
    classpath += files(project.assetsDir)
    standardInput = System.in
    workingDir = project.workDir
    ignoreExitValue = true
}

task createDistDir (dependsOn: ':versionFile', description: "Creates the releases/dist folder") << {
    File distDir = new File(project.distDir)
    // Prepare output directory
    delete distDir
    mkdir distDir

}

task copyToLib (dependsOn: [compileJava, createDistDir], description: "Copies the runtime dependencies to releases/dist/lib") << {

    // Create releases/dist/lib
    File distLib = new File(project.distDir, 'lib')
    mkdir distLib
    project.ext.distLib = distLib.getPath()

    // Copy deps to dist lib folder
    ['runtime'].each { mode ->
        copy {
            from configurations.getByName(mode).files
            into project.distLib
            exclude "**/core-1.0.jar"
            exclude "**/core-" + version + ".jar"
        }
    }

    // Remove folders
    delete project.distLib + '/conf'
    delete project.distLib + '/data'
    delete project.distLib + '/font'
    delete project.distLib + '/i18n'
    delete project.distLib + '/icon'
    delete project.distLib + '/img'
    delete project.distLib + '/scripts'
    delete project.distLib + '/shader'
    delete project.distLib + '/shaders'
    delete project.distLib + '/skins'
    delete project.distLib + '/postprocessing-sources.jar'

}

task gaiasandboxJar (dependsOn: [compileJava, jar, copyToLib],  description: "Creates the gaiasandbox jar and puts it to the dist folder") << {
    copy {
        from "$baseDir/desktop/build/libs/desktop-" + version + ".jar"
        into "$distLib/"
    }
    file("$distLib/desktop-" + version + ".jar").renameTo(file("$distLib/gaiasandbox.jar"))
}

task dist (dependsOn: gaiasandboxJar, description: "Compiles the project, creates the jar and moves it all to releases/gaiasandbox-\$tag-\$rev") << {
    // Copy conf
    mkdir "$distDir/conf"
    copy {
        from "$baseDir/android/assets/conf"
        into "$distDir/conf"
        exclude "**/android"
    }

    // Copy data
    mkdir "$distDir/data"
    copy {
        from "../android/assets/data"
        into "$distDir/data"
        exclude "**/android"

        exclude "**/earth-8k.jpg"
        exclude "**/earth.jpg"
        exclude "**/earth-normal.jpg"
        exclude "**/earth-specular.jpg"
        exclude "**/earth-night.jpg"
        exclude "**/earth-night-2k.jpg"
        exclude "**/mars.jpg"
        exclude "**/jupiter.jpg"
        exclude "**/venus.jpg"


        exclude "**/hyg_metadata.bin"
        exclude "**/hyg_particles.bin"
        exclude "**/*-wgl.json"
        exclude "**/*-lite.json"
    }

    // Add icons to data
    copy {
        from "data"
        into "$distDir/data"
        include "**/config/**"
    }

    // Copy i18n files
    mkdir "$distDir/i18n"
    copy {
        from "$baseDir/android/assets/i18n"
        into "$distDir/i18n"
        exclude "**/android/"
    }

    // Copy script files
    mkdir "$distDir/scripts"
    copy {
        from "$baseDir/android/assets/scripts"
        into "$distDir/scripts"
    }

    // Copy scripts, README, LICENSE and AUTHORS
    copy {
        from "exe"
        into "$distDir"
        exclude "*.sh"
    }
    copy {
        from "$baseDir/"
        into "$distDir"
        include "README.md"
        include "LICENSE"
        include "AUTHORS"
    }
    copy {
        from "$baseDir/android/assets/icon"
        into "$distDir"
        include "ic_launcher.png"
        include "ic_launcher.ico"
        include "ic_launcher.svg"
    }

    // Make gaiasandbox script executable
    def cmd = "chmod u+x $distDir/gaiasandbox"
    cmd.execute()

    // Replace version in readme file
    project.ext.versionFile = file("../core/build/classes/main/version").text
    ant.replace(file: "$distDir/README.md", token: "--------------------------", value: "$versionFile")


}
dist.dependsOn classes

task createTar(dependsOn: dist, description: "Creates application tar package") << {
    File packageDir = new File(project.packageDir)

    delete packageDir
    mkdir packageDir

    ant.tar(destfile: "$packageDir/" + project.distName + ".tar.gz", compression: 'gzip', longfile: 'gnu') {
        tarfileset(dir: "$distDir") {
            exclude (name: "gaiasandbox")
        }
        tarfileset(dir: "$distDir", filemode:'755') {
            include(name: "gaiasandbox")
        }
    }

}

task prepareInstall4jScript (dependsOn: createTar, description: "Prepares the install4j script and copies it to the packages folder") << {
    copy {
        from "installerscripts/template.install4j"
        into "$packageDir"
    }
    file("$packageDir/template.install4j").renameTo(file("$packageDir/" + project.distName + ".install4j"))

    project.ext.releaseFolder = "$baseDir/releases/$distName"

    ant.replace(file: "$packageDir/" + project.distName + ".install4j", token: '@gs-release-folder@', value: "$distDir")
    ant.replace(file: "$packageDir/" + project.distName + ".install4j", token: '@gs-git-folder@', value: "$baseDir")
    ant.replace(file: "$packageDir/" + project.distName + ".install4j", token: '@version-tag@', value: "$tagRev")
}

task install4jMedia(type: com.install4j.gradle.Install4jTask, description: "Runs the install4j task to create the installers") {
    dependsOn 'prepareInstall4jScript' // example task that prepares the distribution for install4j

    projectFile = file("$packageDir/" + project.distName + ".install4j")
    variables = [majorVersion: project.tag, build: project.rev]
}


task pack (dependsOn: install4jMedia, description: "Creates the releases for windows, mac, linux and the tar package") << {

}

eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/android/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
    doLast {
        def classpath = new XmlParser().parse(file(".classpath"))
        new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
        def writer = new FileWriter(file(".classpath"))
        def printer = new XmlNodePrinter(new PrintWriter(writer))
        printer.setPreserveWhitespace(true)
        printer.print(classpath)
    }
}
